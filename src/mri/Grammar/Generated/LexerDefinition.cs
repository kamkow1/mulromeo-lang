//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/kamil/Desktop/mulromeo-lang/src/mri/Grammar\LexerDefinition.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class LexerDefinition : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STR_VAL=1, INT_VAL=2, FLT_VAL=3, ASSIGN=4, ADD=5, SUB=6, DIV=7, MUL=8, 
		POW=9, TERMINATOR=10, IDENTIFIER=11, WHITESPACE=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", "ADD", "SUB", "DIV", "MUL", 
		"POW", "TERMINATOR", "IDENTIFIER", "WHITESPACE"
	};


	public LexerDefinition(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LexerDefinition(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'='", "'+'", "'-'", "'/'", "'*'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", "ADD", "SUB", "DIV", 
		"MUL", "POW", "TERMINATOR", "IDENTIFIER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LexerDefinition.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LexerDefinition() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,85,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,5,0,28,8,0,10,0,12,
		0,31,9,0,1,0,1,0,1,1,3,1,36,8,1,1,1,4,1,39,8,1,11,1,12,1,40,1,2,3,2,44,
		8,2,1,2,4,2,47,8,2,11,2,12,2,48,1,2,1,2,5,2,53,8,2,10,2,12,2,56,9,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,5,10,74,
		8,10,10,10,12,10,77,9,10,1,11,4,11,80,8,11,11,11,12,11,81,1,11,1,11,0,
		0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,5,4,
		0,10,10,13,13,34,34,92,92,3,0,10,10,13,13,32,32,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,92,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,0,0,0,3,
		35,1,0,0,0,5,43,1,0,0,0,7,57,1,0,0,0,9,59,1,0,0,0,11,61,1,0,0,0,13,63,
		1,0,0,0,15,65,1,0,0,0,17,67,1,0,0,0,19,69,1,0,0,0,21,71,1,0,0,0,23,79,
		1,0,0,0,25,29,5,34,0,0,26,28,8,0,0,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,
		1,0,0,0,29,30,1,0,0,0,30,32,1,0,0,0,31,29,1,0,0,0,32,33,5,34,0,0,33,2,
		1,0,0,0,34,36,5,45,0,0,35,34,1,0,0,0,35,36,1,0,0,0,36,38,1,0,0,0,37,39,
		2,48,57,0,38,37,1,0,0,0,39,40,1,0,0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,4,
		1,0,0,0,42,44,5,45,0,0,43,42,1,0,0,0,43,44,1,0,0,0,44,46,1,0,0,0,45,47,
		2,48,57,0,46,45,1,0,0,0,47,48,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,50,
		1,0,0,0,50,54,5,46,0,0,51,53,2,48,57,0,52,51,1,0,0,0,53,56,1,0,0,0,54,
		52,1,0,0,0,54,55,1,0,0,0,55,6,1,0,0,0,56,54,1,0,0,0,57,58,5,61,0,0,58,
		8,1,0,0,0,59,60,5,43,0,0,60,10,1,0,0,0,61,62,5,45,0,0,62,12,1,0,0,0,63,
		64,5,47,0,0,64,14,1,0,0,0,65,66,5,42,0,0,66,16,1,0,0,0,67,68,5,94,0,0,
		68,18,1,0,0,0,69,70,7,1,0,0,70,20,1,0,0,0,71,75,7,2,0,0,72,74,7,3,0,0,
		73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,22,1,0,0,0,
		77,75,1,0,0,0,78,80,7,4,0,0,79,78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,
		81,82,1,0,0,0,82,83,1,0,0,0,83,84,6,11,0,0,84,24,1,0,0,0,9,0,29,35,40,
		43,48,54,75,81,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
