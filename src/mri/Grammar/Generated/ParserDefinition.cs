//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/kamil/Desktop/mulromeo-lang/src/mri/Grammar\ParserDefinition.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParserDefinition : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNC=1, DECLARE=2, LOOP=3, STR_VAL=4, INT_VAL=5, FLT_VAL=6, ASSIGN=7, 
		ADD=8, SUB=9, DIV=10, MUL=11, POW=12, VOID=13, INT=14, STRING=15, FLOAT=16, 
		IMAGE=17, VIDEO=18, AUDIO=19, TERMINATOR=20, COMMA=21, LPAREN=22, RPAREN=23, 
		LBRACE=24, RBRACE=25, PIPE=26, ARROW=27, AMP=28, OUTPUT_HTML=29, IDENTIFIER=30, 
		WHITESPACE=31, COMMENT=32, LINE_COMMENT=33;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_statement = 2, RULE_var_assign = 3, 
		RULE_var_declare = 4, RULE_constant = 5, RULE_html_output_type = 6, RULE_add_element = 7, 
		RULE_range_loop = 8, RULE_return_type = 9, RULE_func_def = 10, RULE_func_invoke = 11, 
		RULE_reference = 12, RULE_expression = 13;
	public static readonly string[] ruleNames = {
		"parse", "block", "statement", "var_assign", "var_declare", "constant", 
		"html_output_type", "add_element", "range_loop", "return_type", "func_def", 
		"func_invoke", "reference", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'declare'", "'loop'", null, null, null, "'='", "'+'", 
		"'-'", "'/'", "'*'", "'^'", "'void'", "'int'", "'str'", "'flt'", "'image'", 
		"'video'", "'audio'", "';'", "','", "'('", "')'", "'{'", "'}'", "'|'", 
		"'->'", "'&'", "'$>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNC", "DECLARE", "LOOP", "STR_VAL", "INT_VAL", "FLT_VAL", "ASSIGN", 
		"ADD", "SUB", "DIV", "MUL", "POW", "VOID", "INT", "STRING", "FLOAT", "IMAGE", 
		"VIDEO", "AUDIO", "TERMINATOR", "COMMA", "LPAREN", "RPAREN", "LBRACE", 
		"RBRACE", "PIPE", "ARROW", "AMP", "OUTPUT_HTML", "IDENTIFIER", "WHITESPACE", 
		"COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserDefinition.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserDefinition() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserDefinition(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserDefinition(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << DECLARE) | (1L << LOOP) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << AMP) | (1L << OUTPUT_HTML) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 30;
				statement();
				}
				}
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_assignContext var_assign() {
			return GetRuleContext<Var_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(ParserDefinition.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declareContext var_declare() {
			return GetRuleContext<Var_declareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_elementContext add_element() {
			return GetRuleContext<Add_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_defContext func_def() {
			return GetRuleContext<Func_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_loopContext range_loop() {
			return GetRuleContext<Range_loopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				var_assign();
				State = 37;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 39;
				var_declare();
				State = 40;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				expression(0);
				State = 43;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 45;
				add_element();
				State = 46;
				Match(TERMINATOR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 48;
				func_def();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 49;
				range_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ParserDefinition.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Var_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterVar_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitVar_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_assignContext var_assign() {
		Var_assignContext _localctx = new Var_assignContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(IDENTIFIER);
			State = 53;
			Match(ASSIGN);
			State = 54;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(ParserDefinition.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		public Var_declareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterVar_declare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitVar_declare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_declare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declareContext var_declare() {
		Var_declareContext _localctx = new Var_declareContext(Context, State);
		EnterRule(_localctx, 8, RULE_var_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(DECLARE);
			State = 57;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_VAL() { return GetToken(ParserDefinition.INT_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_VAL() { return GetToken(ParserDefinition.STR_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLT_VAL() { return GetToken(ParserDefinition.FLT_VAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Html_output_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIDEO() { return GetToken(ParserDefinition.VIDEO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIO() { return GetToken(ParserDefinition.AUDIO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE() { return GetToken(ParserDefinition.IMAGE, 0); }
		public Html_output_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_html_output_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterHtml_output_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitHtml_output_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtml_output_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Html_output_typeContext html_output_type() {
		Html_output_typeContext _localctx = new Html_output_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_html_output_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IMAGE) | (1L << VIDEO) | (1L << AUDIO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT_HTML() { return GetToken(ParserDefinition.OUTPUT_HTML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Html_output_typeContext html_output_type() {
			return GetRuleContext<Html_output_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserDefinition.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserDefinition.COMMA, i);
		}
		public Add_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_elementContext add_element() {
		Add_elementContext _localctx = new Add_elementContext(Context, State);
		EnterRule(_localctx, 14, RULE_add_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(OUTPUT_HTML);
			State = 64;
			html_output_type();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << AMP) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 65;
				expression(0);
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 66;
					Match(COMMA);
					State = 67;
					expression(0);
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ParserDefinition.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(ParserDefinition.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ParserDefinition.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ParserDefinition.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ParserDefinition.RBRACE, 0); }
		public Range_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterRange_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitRange_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_loopContext range_loop() {
		Range_loopContext _localctx = new Range_loopContext(Context, State);
		EnterRule(_localctx, 16, RULE_range_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(LOOP);
			State = 76;
			expression(0);
			State = 77;
			Match(PIPE);
			State = 78;
			expression(0);
			State = 79;
			Match(ARROW);
			State = 80;
			Match(IDENTIFIER);
			State = 81;
			Match(LBRACE);
			State = 82;
			block();
			State = 83;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(ParserDefinition.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ParserDefinition.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ParserDefinition.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ParserDefinition.FLOAT, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_return_type);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				Match(VOID);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87;
				Match(INT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 88;
				Match(STRING);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 89;
				Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(ParserDefinition.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserDefinition.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserDefinition.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ParserDefinition.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ParserDefinition.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ParserDefinition.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ParserDefinition.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserDefinition.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserDefinition.COMMA, i);
		}
		public Func_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterFunc_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitFunc_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_defContext func_def() {
		Func_defContext _localctx = new Func_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_func_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(FUNC);
			State = 93;
			return_type();
			State = 94;
			Match(IDENTIFIER);
			State = 95;
			Match(LPAREN);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 96;
				Match(IDENTIFIER);
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 97;
					Match(COMMA);
					State = 98;
					Match(IDENTIFIER);
					}
					}
					State = 103;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 106;
			Match(RPAREN);
			State = 107;
			Match(LBRACE);
			State = 108;
			block();
			State = 109;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_invokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserDefinition.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserDefinition.COMMA, i);
		}
		public Func_invokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_invoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterFunc_invoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitFunc_invoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_invoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_invokeContext func_invoke() {
		Func_invokeContext _localctx = new Func_invokeContext(Context, State);
		EnterRule(_localctx, 22, RULE_func_invoke);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(IDENTIFIER);
			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 112;
				expression(0);
				State = 117;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 113;
						Match(COMMA);
						State = 114;
						expression(0);
						}
						} 
					}
					State = 119;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(ParserDefinition.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(AMP);
			State = 123;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ParserDefinition.ADD, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ReferenceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ParserDefinition.DIV, 0); }
		public DivExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterDivExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitDivExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvokeFunctionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_invokeContext func_invoke() {
			return GetRuleContext<Func_invokeContext>(0);
		}
		public InvokeFunctionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterInvokeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitInvokeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ParserDefinition.SUB, 0); }
		public SubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterSubExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitSubExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ParserDefinition.MUL, 0); }
		public MulExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterMulExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitMulExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 126;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new ReferenceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 128;
				reference();
				}
				break;
			case 4:
				{
				_localctx = new InvokeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129;
				func_invoke();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 146;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 144;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 133;
						Match(ADD);
						State = 134;
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new DivExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 136;
						Match(DIV);
						State = 137;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new SubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 139;
						Match(SUB);
						State = 140;
						expression(3);
						}
						break;
					case 4:
						{
						_localctx = new MulExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 141;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 142;
						Match(MUL);
						State = 143;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 148;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,33,150,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		1,5,1,32,8,1,10,1,12,1,35,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,3,2,51,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,7,1,7,1,7,5,7,69,8,7,10,7,12,7,72,9,7,3,7,74,8,7,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,91,8,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,5,10,100,8,10,10,10,12,10,103,9,10,3,10,105,8,10,
		1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,116,8,11,10,11,12,11,
		119,9,11,3,11,121,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,3,13,131,
		8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,
		145,8,13,10,13,12,13,148,9,13,1,13,0,1,26,14,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,0,2,1,0,4,6,1,0,17,19,158,0,28,1,0,0,0,2,33,1,0,0,0,4,50,1,
		0,0,0,6,52,1,0,0,0,8,56,1,0,0,0,10,59,1,0,0,0,12,61,1,0,0,0,14,63,1,0,
		0,0,16,75,1,0,0,0,18,90,1,0,0,0,20,92,1,0,0,0,22,111,1,0,0,0,24,122,1,
		0,0,0,26,130,1,0,0,0,28,29,3,2,1,0,29,1,1,0,0,0,30,32,3,4,2,0,31,30,1,
		0,0,0,32,35,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,3,1,0,0,0,35,33,1,0,
		0,0,36,37,3,6,3,0,37,38,5,20,0,0,38,51,1,0,0,0,39,40,3,8,4,0,40,41,5,20,
		0,0,41,51,1,0,0,0,42,43,3,26,13,0,43,44,5,20,0,0,44,51,1,0,0,0,45,46,3,
		14,7,0,46,47,5,20,0,0,47,51,1,0,0,0,48,51,3,20,10,0,49,51,3,16,8,0,50,
		36,1,0,0,0,50,39,1,0,0,0,50,42,1,0,0,0,50,45,1,0,0,0,50,48,1,0,0,0,50,
		49,1,0,0,0,51,5,1,0,0,0,52,53,5,30,0,0,53,54,5,7,0,0,54,55,3,26,13,0,55,
		7,1,0,0,0,56,57,5,2,0,0,57,58,5,30,0,0,58,9,1,0,0,0,59,60,7,0,0,0,60,11,
		1,0,0,0,61,62,7,1,0,0,62,13,1,0,0,0,63,64,5,29,0,0,64,73,3,12,6,0,65,70,
		3,26,13,0,66,67,5,21,0,0,67,69,3,26,13,0,68,66,1,0,0,0,69,72,1,0,0,0,70,
		68,1,0,0,0,70,71,1,0,0,0,71,74,1,0,0,0,72,70,1,0,0,0,73,65,1,0,0,0,73,
		74,1,0,0,0,74,15,1,0,0,0,75,76,5,3,0,0,76,77,3,26,13,0,77,78,5,26,0,0,
		78,79,3,26,13,0,79,80,5,27,0,0,80,81,5,30,0,0,81,82,5,24,0,0,82,83,3,2,
		1,0,83,84,5,25,0,0,84,17,1,0,0,0,85,91,1,0,0,0,86,91,5,13,0,0,87,91,5,
		14,0,0,88,91,5,15,0,0,89,91,5,16,0,0,90,85,1,0,0,0,90,86,1,0,0,0,90,87,
		1,0,0,0,90,88,1,0,0,0,90,89,1,0,0,0,91,19,1,0,0,0,92,93,5,1,0,0,93,94,
		3,18,9,0,94,95,5,30,0,0,95,104,5,22,0,0,96,101,5,30,0,0,97,98,5,21,0,0,
		98,100,5,30,0,0,99,97,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,
		0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,104,96,1,0,0,0,104,105,1,0,0,0,105,
		106,1,0,0,0,106,107,5,23,0,0,107,108,5,24,0,0,108,109,3,2,1,0,109,110,
		5,25,0,0,110,21,1,0,0,0,111,120,5,30,0,0,112,117,3,26,13,0,113,114,5,21,
		0,0,114,116,3,26,13,0,115,113,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,
		117,118,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,120,112,1,0,0,0,120,121,
		1,0,0,0,121,23,1,0,0,0,122,123,5,28,0,0,123,124,5,30,0,0,124,25,1,0,0,
		0,125,126,6,13,-1,0,126,131,3,10,5,0,127,131,5,30,0,0,128,131,3,24,12,
		0,129,131,3,22,11,0,130,125,1,0,0,0,130,127,1,0,0,0,130,128,1,0,0,0,130,
		129,1,0,0,0,131,146,1,0,0,0,132,133,10,4,0,0,133,134,5,8,0,0,134,145,3,
		26,13,5,135,136,10,3,0,0,136,137,5,10,0,0,137,145,3,26,13,4,138,139,10,
		2,0,0,139,140,5,9,0,0,140,145,3,26,13,3,141,142,10,1,0,0,142,143,5,11,
		0,0,143,145,3,26,13,2,144,132,1,0,0,0,144,135,1,0,0,0,144,138,1,0,0,0,
		144,141,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,27,
		1,0,0,0,148,146,1,0,0,0,12,33,50,70,73,90,101,104,117,120,130,144,146
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
