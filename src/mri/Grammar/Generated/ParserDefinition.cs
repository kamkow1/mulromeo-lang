//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/kamil/Desktop/mulromeo-lang/src/mri/Grammar\ParserDefinition.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class ParserDefinition : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNC=1, DECLARE=2, LOOP=3, FLUSH=4, STR_VAL=5, INT_VAL=6, FLT_VAL=7, ASSIGN=8, 
		ADD=9, SUB=10, DIV=11, MUL=12, POW=13, VOID=14, INT=15, STRING=16, FLOAT=17, 
		IMAGE=18, VIDEO=19, AUDIO=20, TERMINATOR=21, COMMA=22, LPAREN=23, RPAREN=24, 
		LBRACE=25, RBRACE=26, PIPE=27, ARROW=28, AMP=29, OUTPUT_HTML=30, AT=31, 
		LSQBR=32, RSQBR=33, IDENTIFIER=34, WHITESPACE=35, COMMENT=36, LINE_COMMENT=37;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_statement = 2, RULE_var_assign = 3, 
		RULE_var_declare = 4, RULE_constant = 5, RULE_html_output_type = 6, RULE_add_element = 7, 
		RULE_range_loop = 8, RULE_flush_memory = 9, RULE_return_type = 10, RULE_func_def = 11, 
		RULE_func_invoke = 12, RULE_reference = 13, RULE_expression = 14;
	public static readonly string[] ruleNames = {
		"parse", "block", "statement", "var_assign", "var_declare", "constant", 
		"html_output_type", "add_element", "range_loop", "flush_memory", "return_type", 
		"func_def", "func_invoke", "reference", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'declare'", "'loop'", "'flush!'", null, null, null, "'='", 
		"'+'", "'-'", "'/'", "'*'", "'^'", "'void'", "'int'", "'str'", "'flt'", 
		"'image'", "'video'", "'audio'", "';'", "','", "'('", "')'", "'{'", "'}'", 
		"'|'", "'->'", "'&'", "'$>'", "'@'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNC", "DECLARE", "LOOP", "FLUSH", "STR_VAL", "INT_VAL", "FLT_VAL", 
		"ASSIGN", "ADD", "SUB", "DIV", "MUL", "POW", "VOID", "INT", "STRING", 
		"FLOAT", "IMAGE", "VIDEO", "AUDIO", "TERMINATOR", "COMMA", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "PIPE", "ARROW", "AMP", "OUTPUT_HTML", "AT", "LSQBR", 
		"RSQBR", "IDENTIFIER", "WHITESPACE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ParserDefinition.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ParserDefinition() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ParserDefinition(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ParserDefinition(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << DECLARE) | (1L << LOOP) | (1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << AMP) | (1L << OUTPUT_HTML) | (1L << AT) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 32;
				statement();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_assignContext var_assign() {
			return GetRuleContext<Var_assignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(ParserDefinition.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_declareContext var_declare() {
			return GetRuleContext<Var_declareContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_elementContext add_element() {
			return GetRuleContext<Add_elementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flush_memoryContext flush_memory() {
			return GetRuleContext<Flush_memoryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_defContext func_def() {
			return GetRuleContext<Func_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_loopContext range_loop() {
			return GetRuleContext<Range_loopContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 38;
				var_assign();
				State = 39;
				Match(TERMINATOR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				var_declare();
				State = 42;
				Match(TERMINATOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 44;
				expression(0);
				State = 45;
				Match(TERMINATOR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 47;
				add_element();
				State = 48;
				Match(TERMINATOR);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 50;
				flush_memory();
				State = 51;
				Match(TERMINATOR);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 53;
				func_def();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 54;
				range_loop();
				State = 55;
				Match(TERMINATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_assignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(ParserDefinition.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Var_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterVar_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitVar_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_assignContext var_assign() {
		Var_assignContext _localctx = new Var_assignContext(Context, State);
		EnterRule(_localctx, 6, RULE_var_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(IDENTIFIER);
			State = 60;
			Match(ASSIGN);
			State = 61;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_declareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(ParserDefinition.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		public Var_declareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterVar_declare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitVar_declare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_declare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_declareContext var_declare() {
		Var_declareContext _localctx = new Var_declareContext(Context, State);
		EnterRule(_localctx, 8, RULE_var_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(DECLARE);
			State = 64;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_VAL() { return GetToken(ParserDefinition.INT_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_VAL() { return GetToken(ParserDefinition.STR_VAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLT_VAL() { return GetToken(ParserDefinition.FLT_VAL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Html_output_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIDEO() { return GetToken(ParserDefinition.VIDEO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIO() { return GetToken(ParserDefinition.AUDIO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGE() { return GetToken(ParserDefinition.IMAGE, 0); }
		public Html_output_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_html_output_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterHtml_output_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitHtml_output_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtml_output_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Html_output_typeContext html_output_type() {
		Html_output_typeContext _localctx = new Html_output_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_html_output_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IMAGE) | (1L << VIDEO) | (1L << AUDIO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTPUT_HTML() { return GetToken(ParserDefinition.OUTPUT_HTML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Html_output_typeContext html_output_type() {
			return GetRuleContext<Html_output_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserDefinition.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserDefinition.COMMA, i);
		}
		public Add_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitAdd_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_elementContext add_element() {
		Add_elementContext _localctx = new Add_elementContext(Context, State);
		EnterRule(_localctx, 14, RULE_add_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(OUTPUT_HTML);
			State = 71;
			html_output_type();
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << AMP) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 72;
				expression(0);
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 73;
					Match(COMMA);
					State = 74;
					expression(0);
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_loopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(ParserDefinition.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(ParserDefinition.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ParserDefinition.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ParserDefinition.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ParserDefinition.RBRACE, 0); }
		public Range_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterRange_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitRange_loop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_loopContext range_loop() {
		Range_loopContext _localctx = new Range_loopContext(Context, State);
		EnterRule(_localctx, 16, RULE_range_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(LOOP);
			State = 83;
			expression(0);
			State = 84;
			Match(PIPE);
			State = 85;
			expression(0);
			State = 86;
			Match(ARROW);
			State = 87;
			Match(IDENTIFIER);
			State = 88;
			Match(LBRACE);
			State = 89;
			block();
			State = 90;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flush_memoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(ParserDefinition.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(ParserDefinition.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQBR() { return GetToken(ParserDefinition.LSQBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQBR() { return GetToken(ParserDefinition.RSQBR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserDefinition.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserDefinition.COMMA, i);
		}
		public Flush_memoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flush_memory; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterFlush_memory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitFlush_memory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlush_memory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flush_memoryContext flush_memory() {
		Flush_memoryContext _localctx = new Flush_memoryContext(Context, State);
		EnterRule(_localctx, 18, RULE_flush_memory);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(AT);
			State = 93;
			Match(FLUSH);
			State = 94;
			Match(LSQBR);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STR_VAL) | (1L << INT_VAL) | (1L << FLT_VAL) | (1L << AMP) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 95;
				expression(0);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 96;
					Match(COMMA);
					State = 97;
					expression(0);
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 105;
			Match(RSQBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(ParserDefinition.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(ParserDefinition.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ParserDefinition.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ParserDefinition.FLOAT, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_return_type);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				Match(VOID);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				Match(INT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110;
				Match(STRING);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 111;
				Match(FLOAT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(ParserDefinition.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(ParserDefinition.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ParserDefinition.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ParserDefinition.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ParserDefinition.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(ParserDefinition.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(ParserDefinition.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserDefinition.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserDefinition.COMMA, i);
		}
		public Func_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterFunc_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitFunc_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_defContext func_def() {
		Func_defContext _localctx = new Func_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_func_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(FUNC);
			State = 115;
			return_type();
			State = 116;
			Match(IDENTIFIER);
			State = 117;
			Match(LPAREN);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 118;
				Match(IDENTIFIER);
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 119;
					Match(COMMA);
					State = 120;
					Match(IDENTIFIER);
					}
					}
					State = 125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 128;
			Match(RPAREN);
			State = 129;
			Match(LBRACE);
			State = 130;
			block();
			State = 131;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_invokeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ParserDefinition.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ParserDefinition.COMMA, i);
		}
		public Func_invokeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_invoke; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterFunc_invoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitFunc_invoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_invoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_invokeContext func_invoke() {
		Func_invokeContext _localctx = new Func_invokeContext(Context, State);
		EnterRule(_localctx, 24, RULE_func_invoke);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			Match(IDENTIFIER);
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 134;
				expression(0);
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 135;
						Match(COMMA);
						State = 136;
						expression(0);
						}
						} 
					}
					State = 141;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(ParserDefinition.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		public ReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceContext reference() {
		ReferenceContext _localctx = new ReferenceContext(Context, State);
		EnterRule(_localctx, 26, RULE_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(AMP);
			State = 145;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(ParserDefinition.ADD, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceContext reference() {
			return GetRuleContext<ReferenceContext>(0);
		}
		public ReferenceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ParserDefinition.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(ParserDefinition.DIV, 0); }
		public DivExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterDivExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitDivExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvokeFunctionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Func_invokeContext func_invoke() {
			return GetRuleContext<Func_invokeContext>(0);
		}
		public InvokeFunctionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterInvokeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitInvokeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(ParserDefinition.SUB, 0); }
		public SubExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterSubExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitSubExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(ParserDefinition.MUL, 0); }
		public MulExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.EnterMulExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IParserDefinitionListener typedListener = listener as IParserDefinitionListener;
			if (typedListener != null) typedListener.ExitMulExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IParserDefinitionVisitor<TResult> typedVisitor = visitor as IParserDefinitionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 148;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new ReferenceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				reference();
				}
				break;
			case 4:
				{
				_localctx = new InvokeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 151;
				func_invoke();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 166;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 155;
						Match(ADD);
						State = 156;
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new DivExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 157;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 158;
						Match(DIV);
						State = 159;
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new SubExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 160;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 161;
						Match(SUB);
						State = 162;
						expression(3);
						}
						break;
					case 4:
						{
						_localctx = new MulExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 163;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 164;
						Match(MUL);
						State = 165;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,37,172,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,1,1,5,1,34,8,1,10,1,12,1,37,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,58,8,2,1,3,1,3,1,3,1,
		3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,5,7,76,8,7,10,7,12,7,
		79,9,7,3,7,81,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,1,9,5,9,99,8,9,10,9,12,9,102,9,9,3,9,104,8,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,3,10,113,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,122,
		8,11,10,11,12,11,125,9,11,3,11,127,8,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,5,12,138,8,12,10,12,12,12,141,9,12,3,12,143,8,12,1,13,1,
		13,1,13,1,14,1,14,1,14,1,14,1,14,3,14,153,8,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,167,8,14,10,14,12,14,170,9,14,
		1,14,0,1,28,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,0,2,1,0,5,7,1,0,
		18,20,182,0,30,1,0,0,0,2,35,1,0,0,0,4,57,1,0,0,0,6,59,1,0,0,0,8,63,1,0,
		0,0,10,66,1,0,0,0,12,68,1,0,0,0,14,70,1,0,0,0,16,82,1,0,0,0,18,92,1,0,
		0,0,20,112,1,0,0,0,22,114,1,0,0,0,24,133,1,0,0,0,26,144,1,0,0,0,28,152,
		1,0,0,0,30,31,3,2,1,0,31,1,1,0,0,0,32,34,3,4,2,0,33,32,1,0,0,0,34,37,1,
		0,0,0,35,33,1,0,0,0,35,36,1,0,0,0,36,3,1,0,0,0,37,35,1,0,0,0,38,39,3,6,
		3,0,39,40,5,21,0,0,40,58,1,0,0,0,41,42,3,8,4,0,42,43,5,21,0,0,43,58,1,
		0,0,0,44,45,3,28,14,0,45,46,5,21,0,0,46,58,1,0,0,0,47,48,3,14,7,0,48,49,
		5,21,0,0,49,58,1,0,0,0,50,51,3,18,9,0,51,52,5,21,0,0,52,58,1,0,0,0,53,
		58,3,22,11,0,54,55,3,16,8,0,55,56,5,21,0,0,56,58,1,0,0,0,57,38,1,0,0,0,
		57,41,1,0,0,0,57,44,1,0,0,0,57,47,1,0,0,0,57,50,1,0,0,0,57,53,1,0,0,0,
		57,54,1,0,0,0,58,5,1,0,0,0,59,60,5,34,0,0,60,61,5,8,0,0,61,62,3,28,14,
		0,62,7,1,0,0,0,63,64,5,2,0,0,64,65,5,34,0,0,65,9,1,0,0,0,66,67,7,0,0,0,
		67,11,1,0,0,0,68,69,7,1,0,0,69,13,1,0,0,0,70,71,5,30,0,0,71,80,3,12,6,
		0,72,77,3,28,14,0,73,74,5,22,0,0,74,76,3,28,14,0,75,73,1,0,0,0,76,79,1,
		0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,80,72,1,
		0,0,0,80,81,1,0,0,0,81,15,1,0,0,0,82,83,5,3,0,0,83,84,3,28,14,0,84,85,
		5,27,0,0,85,86,3,28,14,0,86,87,5,28,0,0,87,88,5,34,0,0,88,89,5,25,0,0,
		89,90,3,2,1,0,90,91,5,26,0,0,91,17,1,0,0,0,92,93,5,31,0,0,93,94,5,4,0,
		0,94,103,5,32,0,0,95,100,3,28,14,0,96,97,5,22,0,0,97,99,3,28,14,0,98,96,
		1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,104,1,0,0,0,
		102,100,1,0,0,0,103,95,1,0,0,0,103,104,1,0,0,0,104,105,1,0,0,0,105,106,
		5,33,0,0,106,19,1,0,0,0,107,113,1,0,0,0,108,113,5,14,0,0,109,113,5,15,
		0,0,110,113,5,16,0,0,111,113,5,17,0,0,112,107,1,0,0,0,112,108,1,0,0,0,
		112,109,1,0,0,0,112,110,1,0,0,0,112,111,1,0,0,0,113,21,1,0,0,0,114,115,
		5,1,0,0,115,116,3,20,10,0,116,117,5,34,0,0,117,126,5,23,0,0,118,123,5,
		34,0,0,119,120,5,22,0,0,120,122,5,34,0,0,121,119,1,0,0,0,122,125,1,0,0,
		0,123,121,1,0,0,0,123,124,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,126,
		118,1,0,0,0,126,127,1,0,0,0,127,128,1,0,0,0,128,129,5,24,0,0,129,130,5,
		25,0,0,130,131,3,2,1,0,131,132,5,26,0,0,132,23,1,0,0,0,133,142,5,34,0,
		0,134,139,3,28,14,0,135,136,5,22,0,0,136,138,3,28,14,0,137,135,1,0,0,0,
		138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,143,1,0,0,0,141,139,
		1,0,0,0,142,134,1,0,0,0,142,143,1,0,0,0,143,25,1,0,0,0,144,145,5,29,0,
		0,145,146,5,34,0,0,146,27,1,0,0,0,147,148,6,14,-1,0,148,153,3,10,5,0,149,
		153,5,34,0,0,150,153,3,26,13,0,151,153,3,24,12,0,152,147,1,0,0,0,152,149,
		1,0,0,0,152,150,1,0,0,0,152,151,1,0,0,0,153,168,1,0,0,0,154,155,10,4,0,
		0,155,156,5,9,0,0,156,167,3,28,14,5,157,158,10,3,0,0,158,159,5,11,0,0,
		159,167,3,28,14,4,160,161,10,2,0,0,161,162,5,10,0,0,162,167,3,28,14,3,
		163,164,10,1,0,0,164,165,5,12,0,0,165,167,3,28,14,2,166,154,1,0,0,0,166,
		157,1,0,0,0,166,160,1,0,0,0,166,163,1,0,0,0,167,170,1,0,0,0,168,166,1,
		0,0,0,168,169,1,0,0,0,169,29,1,0,0,0,170,168,1,0,0,0,14,35,57,77,80,100,
		103,112,123,126,139,142,152,166,168
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
